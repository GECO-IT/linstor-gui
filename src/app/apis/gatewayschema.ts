/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v2/iscsi": {
    /**
     * Lists all iSCSI targets 
     * @description Returns a list of all iSCSI targets created by LINSTOR Gateway
     */
    get: operations["iscsiList"];
    /**
     * Creates a new iSCSI target 
     * @description Creates a new iSCSI target
     */
    post: operations["iscsiCreate"];
  };
  "/api/v2/iscsi/{iqn}": {
    /**
     * Gets an iSCSI target 
     * @description Gets the resource config of a single iSCSI target.
     */
    get: operations["iscsiGet"];
    /**
     * Deletes an iSCSI target 
     * @description Deletes an iSCSI target, along with all its LUNs
     */
    delete: operations["iscsiDelete"];
  };
  "/api/v2/iscsi/{iqn}/start": {
    /**
     * Starts an iSCSI target 
     * @description Starts an iSCSI target.
     */
    post: operations["iscsiStart"];
  };
  "/api/v2/iscsi/{iqn}/stop": {
    /**
     * Stops an iSCSI target 
     * @description Stops an iSCSI target.
     */
    post: operations["iscsiStop"];
  };
  "/api/v2/iscsi/{iqn}/{lun}": {
    /**
     * Gets a logical unit of an iSCSI target 
     * @description Gets the resource config for a single logical unit of an iSCSI target.
     */
    get: operations["iscsiGetLu"];
    /**
     * Adds a logical unit to an iSCSI target 
     * @description Adds a logical unit to an iSCSI target. The target must be stopped when this operation is run.
     */
    put: operations["iscsiAddLu"];
    /**
     * Deletes a logical unit of an iSCSI target 
     * @description Deletes a single logical unit from an iSCSI target. The target must be stopped when this operation is run.
     */
    delete: operations["iscsiDeleteLu"];
  };
  "/api/v2/nfs": {
    /**
     * Lists all NFS exports 
     * @description Lists all NFS exports created by LINSTOR Gateway
     */
    get: operations["nfsList"];
    /** @description Creates a new NFS export */
    post: operations["nfsCreate"];
  };
  "/api/v2/nfs/{name}": {
    /**
     * Gets an NFS export 
     * @description Gets details and status information about an NFS export.
     */
    get: operations["nfsGet"];
    /** @description Delete an NFS export, including all its volumes. */
    delete: operations["nfsDelete"];
  };
  "/api/v2/nfs/{name}/start": {
    /**
     * Starts an NFS export 
     * @description Starts an NFS export. This is only possible if the export is currently stopped, otherwise this operation does nothing.
     */
    post: operations["nfsStart"];
  };
  "/api/v2/nfs/{name}/stop": {
    /**
     * Stops an NFS export 
     * @description Stops an NFS export. Stopping an export makes it unavailable to its consumers while not fully deleting it. This is only possible if the export is currently started, otherwise this operation does nothing.
     */
    post: operations["nfsStop"];
  };
  "/api/v2/nfs/{name}/{volume}": {
    /**
     * Gets a volume of an NFS export 
     * @description Gets information about a single volume of an NFS export
     */
    get: operations["nfsGetVolume"];
    /**
     * Deletes a volume of an NFS export 
     * @description Deletes a single volume from an NFS export. The export must be stopped before this operation can be executed.
     */
    delete: operations["nfsDeleteVolume"];
  };
  "/api/v2/nvme-of": {
    /**
     * Lists all NVMe-oF targets 
     * @description Lists all NVMe-oF targets created by LINSTOR Gateway
     */
    get: operations["nvmeOfList"];
    /**
     * Creates a new NVMe-oF target 
     * @description Creates a new NVMe-oF target
     */
    post: operations["nvmeOfCreate"];
  };
  "/api/v2/nvme-of/{nqn}": {
    /**
     * Get an NVMe-oF target 
     * @description Get information about a single NVMe-oF target
     */
    get: operations["nvmeOfGet"];
    /**
     * Delete an NVMe-oF target 
     * @description Deletes an NVMe-oF target, along with all its volumes.
     */
    delete: operations["nvmeOfDelete"];
  };
  "/api/v2/nvme-of/{nqn}/start": {
    /**
     * Starts an NVMe-oF target 
     * @description Starts an NVMe-oF target. This is only possible if the target is currently stopped, otherwise this operation does nothing.
     */
    post: operations["nvmeOfStart"];
  };
  "/api/v2/nvme-of/{nqn}/stop": {
    /**
     * Stops an NVMe-oF target 
     * @description Stops an NVMe-oF target. This is only possible if the target is currently started, otherwise this operation does nothing.
     */
    post: operations["nvmeOfStop"];
  };
  "/api/v2/nvme-of/{nqn}/{nsid}": {
    /**
     * Delete ad 
     * @description Gets a single volume from an NVMe-oF target
     */
    get: operations["nvmeOfGetVolume"];
    /**
     * Add a volume to an NVMe-oF target 
     * @description Adds a volume to an existing NVMe-oF target. The target must be stopped before executing this operation, or it will fail.
     */
    post: operations["nvmeOfAddVolume"];
    /**
     * Delete a volume from an NVMe-oF target 
     * @description Deletes a volume from an existing NVMe-oF target. The target must be stopped before executing this operation, or it will fail.
     */
    delete: operations["nvmeOfVolumeDelete"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    IQN: string;
    /** NQN */
    NQN: string;
    IPCidr: string;
    /** @enum {string} */
    ResourceState: "OK" | "Degraded" | "Bad";
    /** @enum {string} */
    ServiceState: "Started" | "Stopped";
    VolumeState: {
      number?: number;
      state?: components["schemas"]["ResourceState"];
    };
    ResourceStatus: {
      state?: components["schemas"]["ResourceState"];
      service?: components["schemas"]["ServiceState"];
      primary?: string;
      nodes?: (string)[];
      volumes?: (components["schemas"]["VolumeState"])[];
    };
    VolumeConfig: {
      number?: number;
      /** @example 1048576 */
      size_kib?: number;
    };
    ISCSIResourceConfig: {
      iqn: components["schemas"]["IQN"];
      allowed_initiators?: (components["schemas"]["IQN"])[];
      resource_group: string;
      volumes: (components["schemas"]["VolumeConfig"])[];
      username?: string;
      password?: string;
      service_ips: (components["schemas"]["IPCidr"])[];
      status?: components["schemas"]["ResourceStatus"];
    };
    NFSResourceConfig: {
      name?: string;
      service_ip?: components["schemas"]["IPCidr"];
      allowed_ips?: (components["schemas"]["IPCidr"])[];
      resource_group?: string;
      volumes?: (components["schemas"]["VolumeConfig"])[];
      status?: components["schemas"]["ResourceStatus"];
    };
    /** Error */
    Error: {
      code?: string;
      message?: string;
    };
    /** NvmeOfResourceConfig */
    NvmeOfResourceConfig: {
      nqn?: components["schemas"]["NQN"];
      service_ip?: components["schemas"]["IPCidr"];
      resource_group?: string;
      volumes?: (components["schemas"]["VolumeConfig"])[];
      status?: components["schemas"]["ResourceStatus"];
    };
  };
  responses: {
    /** @description The given IQN has an invalid format. */
    InvalidIQN: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description No iSCSI target with the given IQN can be found. */
    IQNNotFound: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description Some error occurred */
    InternalServerError: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description Example response */
    ExportNotFound: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description No NVMe-oF target with the given NQN can be found. */
    NQNNotFound: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description The given NQN has an invalid format. */
    InvalidNQN: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
  };
  parameters: {
    /**
     * @description IQN of the target 
     * @example iqn.1998-06.com.linbit:vmstorage
     */
    IQN: string;
    /**
     * @description Logical unit number 
     * @example 0
     */
    LUN: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /**
   * Lists all iSCSI targets 
   * @description Returns a list of all iSCSI targets created by LINSTOR Gateway
   */
  iscsiList: {
    responses: {
      /** @description Array of iSCSI target resource configs. */
      200: {
        content: {
          "application/json": (components["schemas"]["ISCSIResourceConfig"])[];
        };
      };
      /** @description Some error occurred */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Creates a new iSCSI target 
   * @description Creates a new iSCSI target
   */
  iscsiCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ISCSIResourceConfig"];
      };
    };
    responses: {
      /** @description The iSCSI target was successfully created. The created target is returned. */
      201: {
        headers: {
          /** @description The URL where the newly created target can be found */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["ISCSIResourceConfig"];
        };
      };
      /** @description Invalid input parameters */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Gets an iSCSI target 
   * @description Gets the resource config of a single iSCSI target.
   */
  iscsiGet: {
    parameters: {
      path: {
        /**
         * @description IQN of the target 
         * @example iqn.1998-06.com.linbit:vmstorage
         */
        iqn: string;
      };
    };
    responses: {
      /** @description A single iSCSI target resource config */
      200: {
        content: {
          "application/json": components["schemas"]["ISCSIResourceConfig"];
        };
      };
      /** @description The given IQN has an invalid format. */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description No iSCSI target with the given IQN can be found. */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Deletes an iSCSI target 
   * @description Deletes an iSCSI target, along with all its LUNs
   */
  iscsiDelete: {
    parameters: {
      path: {
        /**
         * @description IQN of the target 
         * @example iqn.1998-06.com.linbit:vmstorage
         */
        iqn: string;
      };
    };
    responses: {
      /** @description The target was successfully deleted. The response body is empty. */
      200: never;
      /** @description The given IQN has an invalid format. */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description No iSCSI target with the given IQN can be found. */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Some error occurred */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Starts an iSCSI target 
   * @description Starts an iSCSI target.
   */
  iscsiStart: {
    parameters: {
      path: {
        /**
         * @description IQN of the target 
         * @example iqn.1998-06.com.linbit:vmstorage
         */
        iqn: string;
      };
    };
    responses: {
      /** @description The iSCSI target was successfully started */
      200: never;
      /** @description The given IQN has an invalid format. */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description No iSCSI target with the given IQN can be found. */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Some error occurred */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Stops an iSCSI target 
   * @description Stops an iSCSI target.
   */
  iscsiStop: {
    parameters: {
      path: {
        /**
         * @description IQN of the target 
         * @example iqn.1998-06.com.linbit:vmstorage
         */
        iqn: string;
      };
    };
    responses: {
      /** @description The iSCSI target was successfully stopped */
      200: never;
      /** @description The given IQN has an invalid format. */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description No iSCSI target with the given IQN can be found. */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Some error occurred */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Gets a logical unit of an iSCSI target 
   * @description Gets the resource config for a single logical unit of an iSCSI target.
   */
  iscsiGetLu: {
    parameters: {
      path: {
        /**
         * @description IQN of the target 
         * @example iqn.1998-06.com.linbit:vmstorage
         */
        iqn: string;
        /**
         * @description Logical unit number 
         * @example 0
         */
        lun: number;
      };
    };
    responses: {
      /** @description A single volume config */
      200: {
        content: {
          "application/json": components["schemas"]["VolumeConfig"];
        };
      };
      /** @description The given IQN has an invalid format. */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description No iSCSI target with the given IQN can be found. */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Some error occurred */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Adds a logical unit to an iSCSI target 
   * @description Adds a logical unit to an iSCSI target. The target must be stopped when this operation is run.
   */
  iscsiAddLu: {
    parameters: {
      path: {
        /**
         * @description IQN of the target 
         * @example iqn.1998-06.com.linbit:vmstorage
         */
        iqn: string;
        /**
         * @description Logical unit number 
         * @example 0
         */
        lun: number;
      };
    };
    responses: {
      /** @description The VolumeConfig of the logical unit that was just added */
      200: {
        content: {
          "application/json": components["schemas"]["VolumeConfig"];
        };
      };
      /** @description The given IQN has an invalid format. */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description No iSCSI target with the given IQN can be found. */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Some error occurred */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Deletes a logical unit of an iSCSI target 
   * @description Deletes a single logical unit from an iSCSI target. The target must be stopped when this operation is run.
   */
  iscsiDeleteLu: {
    parameters: {
      path: {
        /**
         * @description IQN of the target 
         * @example iqn.1998-06.com.linbit:vmstorage
         */
        iqn: string;
        /**
         * @description Logical unit number 
         * @example 0
         */
        lun: number;
      };
    };
    responses: {
      /** @description The logical unit was successfully deleted. The response body is empty. */
      200: never;
      /** @description The given IQN has an invalid format. */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description No iSCSI target with the given IQN can be found. */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Some error occurred */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Lists all NFS exports 
   * @description Lists all NFS exports created by LINSTOR Gateway
   */
  nfsList: {
    responses: {
      /** @description Array of NFS export resource configs */
      200: {
        content: {
          "application/json": (components["schemas"]["NFSResourceConfig"])[];
        };
      };
      /** @description Some error occurred */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** @description Creates a new NFS export */
  nfsCreate: {
    responses: {
      /** @description The export was successfully created */
      201: {
        headers: {
          /** @description The URL where the newly created export can be found */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["NFSResourceConfig"];
        };
      };
      /** @description Invalid input parameters */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Gets an NFS export 
   * @description Gets details and status information about an NFS export.
   */
  nfsGet: {
    parameters: {
      path: {
        /** @description Name of the NFS export */
        name: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["NFSResourceConfig"];
        };
      };
      /** @description Example response */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Some error occurred */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** @description Delete an NFS export, including all its volumes. */
  nfsDelete: {
    parameters: {
      path: {
        /** @description Name of the NFS export */
        name: string;
      };
    };
    responses: {
      /** @description The export was deleted. The body is empty. */
      200: never;
      /** @description Some error occurred */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Starts an NFS export 
   * @description Starts an NFS export. This is only possible if the export is currently stopped, otherwise this operation does nothing.
   */
  nfsStart: {
    parameters: {
      path: {
        /** @description Name of the NFS export */
        name: string;
      };
    };
    responses: {
      /** @description The export was successfully started. Returns the resource config of the started export. */
      200: {
        headers: {
          /** @description The URL to the NFS export */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["NFSResourceConfig"];
        };
      };
      /** @description Example response */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Some error occurred */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Stops an NFS export 
   * @description Stops an NFS export. Stopping an export makes it unavailable to its consumers while not fully deleting it. This is only possible if the export is currently started, otherwise this operation does nothing.
   */
  nfsStop: {
    parameters: {
      path: {
        /** @description Name of the NFS export */
        name: string;
      };
    };
    responses: {
      /** @description The export was successfully stopped. Returns the resource config of the stopped export. */
      200: {
        headers: {
          /** @description The URL to the NFS export */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["NFSResourceConfig"];
        };
      };
      /** @description Example response */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Some error occurred */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Gets a volume of an NFS export 
   * @description Gets information about a single volume of an NFS export
   */
  nfsGetVolume: {
    parameters: {
      path: {
        /** @description Name of the NFS export */
        name: string;
        /** @description Volume ID */
        volume: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["VolumeConfig"];
        };
      };
      /** @description Invalid volume ID */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Example response */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Deletes a volume of an NFS export 
   * @description Deletes a single volume from an NFS export. The export must be stopped before this operation can be executed.
   */
  nfsDeleteVolume: {
    parameters: {
      path: {
        /** @description Name of the NFS export */
        name: string;
        /** @description Volume ID */
        volume: string;
      };
    };
    responses: {
      /** @description The volume was deleted. The body is empty. */
      200: never;
      /** @description Example response */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Some error occurred */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Lists all NVMe-oF targets 
   * @description Lists all NVMe-oF targets created by LINSTOR Gateway
   */
  nvmeOfList: {
    responses: {
      /** @description List of targets */
      200: {
        content: {
          "application/json": (components["schemas"]["NvmeOfResourceConfig"])[];
        };
      };
      /** @description Some error occurred */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Creates a new NVMe-oF target 
   * @description Creates a new NVMe-oF target
   */
  nvmeOfCreate: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["NvmeOfResourceConfig"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          /** @description The URL to the newly created target */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["NvmeOfResourceConfig"];
        };
      };
      /** @description Invalid parameters */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Get an NVMe-oF target 
   * @description Get information about a single NVMe-oF target
   */
  nvmeOfGet: {
    parameters: {
      path: {
        /** @description The NQN of the target */
        nqn: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["NvmeOfResourceConfig"];
        };
      };
      /** @description The given NQN has an invalid format. */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description No NVMe-oF target with the given NQN can be found. */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Some error occurred */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Delete an NVMe-oF target 
   * @description Deletes an NVMe-oF target, along with all its volumes.
   */
  nvmeOfDelete: {
    parameters: {
      path: {
        /** @description The NQN of the target */
        nqn: string;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description The given NQN has an invalid format. */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description No NVMe-oF target with the given NQN can be found. */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Some error occurred */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Starts an NVMe-oF target 
   * @description Starts an NVMe-oF target. This is only possible if the target is currently stopped, otherwise this operation does nothing.
   */
  nvmeOfStart: {
    parameters: {
      path: {
        /** @description The NQN of the target */
        nqn: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          /** @description URL to the started NVMe-oF target */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["NvmeOfResourceConfig"];
        };
      };
      /** @description The given NQN has an invalid format. */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description No NVMe-oF target with the given NQN can be found. */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Some error occurred */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Stops an NVMe-oF target 
   * @description Stops an NVMe-oF target. This is only possible if the target is currently started, otherwise this operation does nothing.
   */
  nvmeOfStop: {
    parameters: {
      path: {
        /** @description The NQN of the target */
        nqn: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          /** @description URL to the stopped NVMe-oF target */
          Location?: string;
        };
        content: {
          "application/json": components["schemas"]["NvmeOfResourceConfig"];
        };
      };
      /** @description The given NQN has an invalid format. */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description No NVMe-oF target with the given NQN can be found. */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Some error occurred */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Delete ad 
   * @description Gets a single volume from an NVMe-oF target
   */
  nvmeOfGetVolume: {
    parameters: {
      path: {
        /** @description The NQN of the target */
        nqn: string;
        /** @description The ID of the namespace */
        nsid: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["VolumeConfig"];
        };
      };
      /** @description The given NQN has an invalid format. */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description No NVMe-oF target with the given NQN can be found. */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Some error occurred */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Add a volume to an NVMe-oF target 
   * @description Adds a volume to an existing NVMe-oF target. The target must be stopped before executing this operation, or it will fail.
   */
  nvmeOfAddVolume: {
    parameters: {
      path: {
        /** @description The NQN of the target */
        nqn: string;
        /** @description The ID of the namespace */
        nsid: number;
      };
    };
    /** @description The new volume */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["VolumeConfig"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["VolumeConfig"];
        };
      };
      /** @description The given NQN has an invalid format. */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: never;
      /** @description Some error occurred */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * Delete a volume from an NVMe-oF target 
   * @description Deletes a volume from an existing NVMe-oF target. The target must be stopped before executing this operation, or it will fail.
   */
  nvmeOfVolumeDelete: {
    parameters: {
      path: {
        /** @description The NQN of the target */
        nqn: string;
        /** @description The ID of the namespace */
        nsid: number;
      };
    };
    responses: {
      /** @description OK */
      200: never;
      /** @description The given NQN has an invalid format. */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description No NVMe-oF target with the given NQN can be found. */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Some error occurred */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
}
